/*
 * workflow_execution.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package nextflow.ga4gh.wes.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse2002
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-01T15:34:23.960Z")
public class InlineResponse2002 {
  @SerializedName("workflow_id")
  private String workflowId = null;

  @SerializedName("request")
  private WorkflowRequestObject1 request = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNKNOWN("Unknown"),
    
    QUEUED("Queued"),
    
    RUNNING("Running"),
    
    PAUSED("Paused"),
    
    COMPLETE("Complete"),
    
    ERROR("Error"),
    
    SYSTEMERROR("SystemError"),
    
    CANCELED("Canceled"),
    
    INITIALIZING("Initializing");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = StateEnum.UNKNOWN;

  @SerializedName("workflow_log")
  private LogAndOtherInfo workflowLog = null;

  @SerializedName("task_logs")
  private List<LogAndOtherInfo> taskLogs = null;

  @SerializedName("outputs")
  private List<InlineResponse2002Outputs> outputs = null;

  public InlineResponse2002 workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

   /**
   * Get workflowId
   * @return workflowId
  **/
  @ApiModelProperty(value = "")
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }

  public InlineResponse2002 request(WorkflowRequestObject1 request) {
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @ApiModelProperty(value = "")
  public WorkflowRequestObject1 getRequest() {
    return request;
  }

  public void setRequest(WorkflowRequestObject1 request) {
    this.request = request;
  }

  public InlineResponse2002 state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public InlineResponse2002 workflowLog(LogAndOtherInfo workflowLog) {
    this.workflowLog = workflowLog;
    return this;
  }

   /**
   * Get workflowLog
   * @return workflowLog
  **/
  @ApiModelProperty(value = "")
  public LogAndOtherInfo getWorkflowLog() {
    return workflowLog;
  }

  public void setWorkflowLog(LogAndOtherInfo workflowLog) {
    this.workflowLog = workflowLog;
  }

  public InlineResponse2002 taskLogs(List<LogAndOtherInfo> taskLogs) {
    this.taskLogs = taskLogs;
    return this;
  }

  public InlineResponse2002 addTaskLogsItem(LogAndOtherInfo taskLogsItem) {
    if (this.taskLogs == null) {
      this.taskLogs = new ArrayList<LogAndOtherInfo>();
    }
    this.taskLogs.add(taskLogsItem);
    return this;
  }

   /**
   * Get taskLogs
   * @return taskLogs
  **/
  @ApiModelProperty(value = "")
  public List<LogAndOtherInfo> getTaskLogs() {
    return taskLogs;
  }

  public void setTaskLogs(List<LogAndOtherInfo> taskLogs) {
    this.taskLogs = taskLogs;
  }

  public InlineResponse2002 outputs(List<InlineResponse2002Outputs> outputs) {
    this.outputs = outputs;
    return this;
  }

  public InlineResponse2002 addOutputsItem(InlineResponse2002Outputs outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<InlineResponse2002Outputs>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @ApiModelProperty(value = "")
  public List<InlineResponse2002Outputs> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<InlineResponse2002Outputs> outputs) {
    this.outputs = outputs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2002 inlineResponse2002 = (InlineResponse2002) o;
    return Objects.equals(this.workflowId, inlineResponse2002.workflowId) &&
        Objects.equals(this.request, inlineResponse2002.request) &&
        Objects.equals(this.state, inlineResponse2002.state) &&
        Objects.equals(this.workflowLog, inlineResponse2002.workflowLog) &&
        Objects.equals(this.taskLogs, inlineResponse2002.taskLogs) &&
        Objects.equals(this.outputs, inlineResponse2002.outputs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowId, request, state, workflowLog, taskLogs, outputs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2002 {\n");
    
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    workflowLog: ").append(toIndentedString(workflowLog)).append("\n");
    sb.append("    taskLogs: ").append(toIndentedString(taskLogs)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

